#Metoda Gauss FP
import numpy as np
def CondSubDesc(A,b):
    if np.shape(A)[0]!=np.shape(A)[1]:
        print("Matricea sistemului nu este patratica")
        return False
    if np.shape(A)[0]!=np.shape(b)[0]:
        print("Matricea sistemului si vectorul b nu sunt compatibili")
        return False
    for i in range(np.shape(A)[0]):
        if A[i,i]==0:
            print("Matricea sistemului nu este inversabila")
            return False
        for j in range(i):
            if A[i,j]!=0:
                print("Matricea sistemului nu este superior triunghiulara")
                return False
    print("Se poate aplica metoda SubDesc")
    return True        
    
def SubDesc(A,b):
    print(A)
    print(b)
    if CondSubDesc(A,b)==0:
        return False
    else:
        n=len(b)
        x=np.zeros((n,1))
        x[n-1]=b[n-1]/A[n-1,n-1]
        for i in range(n-2,-1,-1):
            x[i]=(b[i]-A[i,i:]@x[i:])/A[i,i]
    return x
    
def MEGFP(A,b):
    n=len(b)
    Aext=np.hstack((A,b))
    for k in range(n-1):
        for i in range(k+1,n):
            m=Aext[i,k]/Aext[k,k]
            Aext[i,:]=Aext[i,:]-m*Aext[k,:]
        print(Aext)
    x=SubDesc(Aext[:,0:n],Aext[:,n])
    return x
A=np.array([[3.,5,3],
            [2,2,3],
            [-1,3,0]])

b=np.array([[1.],
            [3],
            [2]])
x=MEGFP(A,b)
print(x)


    
